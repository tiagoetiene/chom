#!/usr/bin/env node

var _             = require('underscore');
var Twit  				= require( 'twit' );
var dns						= require( 'dns' );

var args 	        = require( './fetch/stream/args' );
var utils         = require( './libs/utils' );


//
// Input parameters
//
var inputKeywords = program.keywords;
var inputLang     = program.lang; 
var inputRetweets = ( program.retweets ) ? true : false;

//
// Removing all keywords that are empty strigns
//
inputKeywords = _.filter( inputKeywords, function( keyword ) { 
	return _.isEmpty( keyword ) == false; 
} );

//
// Lower caseing
//
_.each( inputKeywords, function( keyword, idx ) {
	keyword = keyword.toLowerCase();
});


process.stderr.write( "\n" );
process.stderr.write( "* chom-fetch-stream" + "\n" );
process.stderr.write( "  * parameters settings:\n" );
process.stderr.write( "    * keywords          : " + JSON.stringify( inputKeywords ) + "\n" );
process.stderr.write( "    * language          : " + JSON.stringify( inputLang ) + "\n" );
process.stderr.write( "    * include retweets? : " + JSON.stringify( inputRetweets ) + "\n" );
process.stderr.write( "\n" );


//
//
//
function onExit() {
	process.stdout.write( "{}\n" );
  utils.releaseCredentials();
  process.exit();
}


//
//
//
function printTweet( datum ) {

	if( inputRetweets == false && _.has( datum, "retweeted_status" ) ) {
		return;
	}

	var message = datum.text.toLowerCase();
	_.each( inputKeywords, function( keyword ) {
		if( message.indexOf( keyword ) != -1 ) {
			datum.keyword = keyword;
			datum.created_at = new Date( datum.created_at );
			var ok = process.stdout.write( JSON.stringify( datum ) + "\n" );
			console.assert( ok == true );
		}
	} );	
}

function startStreaming( keywords, lang, callback ) {
		dns.resolve( 'www.google.com', function( err ) {

			if ( err ) {
				streaming = false;
				process.stderr.write( err );
				return;
			}
			
			//
			// If no credentials were passed as input,
			// then lookup the database
			//
			credentials = utils.getCredential();

			//
			// If no credentials were found, then return
			//
			if( _.isEmpty( credentials ) ) {
				process.stderr.write( "* There are no credentials available\n" );
				process.stderr.write( "  Please add new credentials using:\n");
				process.stderr.write( "     chom credentials add\n");
				process.stdout.write( "{}\n" );
				return;
			}

			//
			// Connecting to twitter
			//
			var T = new Twit( credentials );

			//
			// Starting stream of tweets
			//
			var stream = T.stream( "statuses/filter", { track: keywords, language: lang });

			//
			// Starting stream
			//
			stream.on( "tweet", callback );
			stream.on( "error", function( err ) { stream.stop(); } );
		} );
	}

//
// Handling signals
//
process.on('SIGINT', onExit );

startStreaming( inputKeywords, inputLang, printTweet );
